window.onload = function() {
    const useNodeJS = false;   // if you are not using a node server, set this value to false
    const defaultLiffId = "";   // change the default LIFF value if you are not using a node server
    // BISA MASUKKAN LIFF KALIAN DISINI, CONTOH : 123456-abcde
 
    // DO NOT CHANGE THIS
    let myLiffId = "";
 
    // if node is used, fetch the environment variable and pass it to the LIFF method
    // otherwise, pass defaultLiffId
    if (useNodeJS) {
        fetch('/send-id')
            .then(function(reqResponse) {
                return reqResponse.json();
            })
            .then(function(jsonResponse) {
                myLiffId = jsonResponse.id;
                initializeLiffOrDie(myLiffId);
            })
            .catch(function(error) {
                alert(error);
                document.getElementById("liffAppContent").classList.add('hidden');
                document.getElementById("nodeLiffIdErrorMessage").classList.remove('hidden');
            });
    } else {
        myLiffId = defaultLiffId;
        initializeLiffOrDie(myLiffId);
    }
};
 
/**
* Check if myLiffId is null. If null do not initiate liff.
* @param {string} myLiffId The LIFF ID of the selected element
*/
function initializeLiffOrDie(myLiffId) {
    if (!myLiffId) {
        document.getElementById("liffAppContent").classList.add('hidden');
        document.getElementById("liffIdErrorMessage").classList.remove('hidden');
    } else {
        initializeLiff(myLiffId);
    }
}
 
/**
* Initialize LIFF
* @param {string} myLiffId The LIFF ID of the selected element
*/
function initializeLiff(myLiffId) {
    liff
        .init({
            liffId: myLiffId
        })
        .then(() => {
            // start to use LIFF's api
            initializeApp();
        })
        .catch((err) => {
            alert(err);
            document.getElementById("liffAppContent").classList.add('hidden');
            document.getElementById("liffInitErrorMessage").classList.remove('hidden');
        });
}
 
/**
 * Initialize the app by calling functions handling individual app components
 */
function initializeApp() {
    displayLiffData();
    displayIsInClientInfo();
    registerButtonHandlers();
    if(liff.isLoggedIn()) {
        console.log("Yay, berhasil masuk!");
    } else {
        window.location.href = "login.html";
    }
}
 
/**
* Display data generated by invoking LIFF methods
*/
function displayLiffData() {
    if(liff.isLoggedIn()) {
        liff.getProfile()
        .then(profile => {
            document.getElementById('userName').textContent = profile.displayName;
            document.getElementById('userName2').textContent = profile.displayName;
            document.getElementById('userProfile').src = profile.pictureUrl;
        })
        .catch((err) => {
            console.log('error', err);
        });
    }
}
 
/**
* Toggle the login/logout buttons based on the isInClient status, and display a message accordingly
*/
function displayIsInClientInfo() {
    if (liff.isInClient()) {
        document.getElementById('liffLoginButton').classList.add('hidden');
        document.getElementById('liffLogoutButton').classList.add('hidden');
        document.getElementById('isInClientMessage').textContent = 'Posisi dibuka di Browser LINE.';
    } else {
        document.getElementById('liffLoginButton').classList.add('hidden');
        document.getElementById('openWindowButton').classList.add('hidden');
        document.getElementById('closeWindowButton').classList.add('hidden');
        document.getElementById('liffLogoutButton').classList.remove('hidden');
        document.getElementById('isInClientMessage').textContent = 'Posisi dibuka di Browser External.';
    }
}

function registerButtonHandlers() {
    document.getElementById('openWindowButton').addEventListener('click', function() {
        liff.openWindow({
            url: 'https://percobaanliffsaya.herokuapp.com/', // GANTI DENGAN URL HEROKUAPP KALIAN
            external: true
        });
    });

    document.getElementById('closeWindowButton').addEventListener('click', function() {
        if (!liff.isInClient()) {
            sendAlertIfNotInClient();
        } else {
            liff.closeWindow();
        }
    });

    document.getElementById('liffLoginButton').addEventListener('click', function() {
        if(!liff.isLoggedIn()) {
            liff.login();
        }
    });

    document.getElementById('liffLogoutButton').addEventListener('click', function() {
        if(liff.isLoggedIn()) {
            liff.logout();
            window.location.reload();
        }
    });

    document.getElementById('pesan').addEventListener('click', function() {
        
        if(!liff.isInClient()) {
            sendAlertIfNotInClient();
        } else {
            var totalfood, totalfood2, totalbef, totalbef2, totalHarga;
            totalfood = $("#jmlfood").html();
            totalfood2 = $("#jmlfood2").html();
            totalbef = $("#jmlbef").html();
            totalbef2 = $("#jmlbef2").html();
            totalHarga = $("#harga").html();
            liff.getProfile()
            .then(profile => {
                liff.sendMessages([{
                    'type': 'text',
                    'text': `Hai kak ${profile.displayName}, \n\nTerimakasih atas pesanannya, \nbener  ya kak, yang dipesan adalah sebagai berikut : \n\n* ${totalfood} Pempek Bakar\n* ${totalfood2} Pempek Goreng\n* ${totalbef} Enjoy Drink Variant Squidward\n* ${totalbef2} Enjoy Drink Variant Patrick\n\nTotal : Rp. ${totalHarga}\n\nPesanan sedang di proses ya kak, maaf tidak bisa dicancel kak.\n\nMohon ditunggu sebentar ya :)`
                }]).then(function() {
                    window.alert("Pesanan masuk");
                }).catch(function(error) {
                    window.alert("Error sending message : " + error);
                });
            }).catch((err) => {
                console.log(err);
            });
        }
    });
}

function sendAlertIfNotInClient() {
    alert('Oops! Pesanan tidak dapat diproses karena dibuka menggunakan browser luar, tolong buka dari Line');
}